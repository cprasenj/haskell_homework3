module Golf where
import Data.List
import Data.List.Split
import Data.String ()

findEveryNth :: [a] -> Int -> [a]
findEveryNth list n = map head . chunksOf n $ drop (pred n) list

skips :: [a] -> [[a]]
skips list = map (findEveryNth list) [1..(length list)]

createFrames :: [a] -> Int -> [[a]]
createFrames list frameSize
  | length list < frameSize  = []
  | otherwise = take frameSize list : createFrames (tail list) frameSize

localMaxima :: Ord a => [a] -> [a]
localMaxima list = foldl (\x y -> let first = head y
                                      second = (!!) y 1
                                      third = last y in
  if and $ [(>)] <*> [second] <*> [first, third] then x ++ [second] else x) [] $ createFrames list 3

findAppearance :: Eq a => a -> [a] -> (a, Int)
findAppearance element list = (element, length . elemIndices  element $ list)

getHistString :: Ord a => a -> a -> String
getHistString l1 l2 = if (>=) l2 l1 then "*" else " "

histogram :: [Integer] -> String
histogram list = unlines (map (\level -> foldl (\histString (_, occurance) ->   histString ++ getHistString level occurance) "" appearances) [height, pred height..1]) ++ "==========\n0123456789\n"
  where elements = [0..9]
        appearances = map (`findAppearance` list) elements
        height = maximum $ map snd appearances
